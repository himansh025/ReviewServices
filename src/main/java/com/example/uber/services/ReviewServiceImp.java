package com.example.uber.services;import com.example.uber.models.Booking;import com.example.uber.models.Review;import com.example.uber.repositories.BookingRepository;import com.example.uber.repositories.DriverRepository;import com.example.uber.repositories.ReviewRepository;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.*;@Servicepublic class ReviewServiceImp implements ReviewService {    private final DriverRepository driverRepository;    private final ReviewRepository reviewRepository;    private final BookingRepository bookingRepository;    public ReviewServiceImp(DriverRepository driverRepository, ReviewRepository reviewRepository,BookingRepository bookingRepository) {        this.driverRepository = driverRepository;        this.reviewRepository = reviewRepository;        this.bookingRepository= bookingRepository;    }    @Override    public List<Review> findAllReviews() {        try {            return reviewRepository.findAll();        } catch (Exception e) {            System.out.println(e.getMessage());            throw new RuntimeException(e);        }    }    @Override    public Optional<Review> findReviewById(Long id) {        try {            return reviewRepository.findById(id);        } catch (Exception e) {            System.out.println(e.getMessage());            throw new RuntimeException(e);        }    }    /*    @Override    public Boolean deleteReviewById(Long reviewId,Long bookingId) {        try {            Booking booking=bookingRepository.findById(bookingId)                    .orElseThrow(() -> new RuntimeException("no booking is found for this booking id"));           Review review = booking.();            if (review == null || !review.getId().equals(reviewId)) {                throw new RuntimeException("Review not found or does not match booking");            }            booking.setReview(null);            reviewRepository.deleteById(reviewId);            return true;        } catch (Exception e) {            System.out.println("Error deleting review: " + e.getMessage());            throw new RuntimeException(e);        }    }*/   /*    @Override    public Review updateReviewById(Review review, Long bookingId) {        try {            Booking booking=bookingRepository.findById(bookingId)                    .orElseThrow(() -> new RuntimeException("no booking is found for this booking id"));            Review existingReview = booking.getReview();            if (existingReview == null) {                throw new RuntimeException("No review exists for this booking");            }            existingReview.setRating(review.getRating());            existingReview.setContent(review.getContent());            existingReview.setUpdatedAt(new Date()); // update timestamp            Optional<Review> rev = reviewRepository.findById(reviewId);            return review;        } catch (Exception e) {            System.out.println("Error deleting review: " + e.getMessage());            throw new RuntimeException(e);        }    }     */    @Override    public List<Review> findAllByCreatedAtBefore(Date date) {        try {            return reviewRepository.findAllByCreatedAtBefore(date);        } catch (Exception e) {            System.out.println("Error createdAtBefore review: " + e.getMessage());            throw new RuntimeException(e);        }    }    @Override    public List<Review> findAllReviewsRatingLessThanEqual(Integer givenRating) {        try {            return reviewRepository.findAllByRatingIsLessThanEqual(givenRating);        } catch (Exception e) {            System.out.println("Error findAllByRatingIsLessThanEqual review: " + e.getMessage());            throw new RuntimeException(e);        }    }    @Override    public Integer countAllRatingLessThanEqual(Integer givenRating) {        try {            return reviewRepository.countAllByRatingIsLessThanEqual(givenRating);        } catch (Exception e) {            System.out.println("Error countAllByRatingIsLessThanEqual review: " + e.getMessage());            throw new RuntimeException(e);        }    }//    @Override//    public Review findReviewByBookingId(Long bookingId) {//        try {//            return reviewRepository.findReviewByBookingId(bookingId);//        } catch (Exception e) {//            System.out.println("Error findReviewByBookingId review: " + e.getMessage());//            throw new RuntimeException(e);//        }//    }    @Override    @Transactional    public Review postReview(Long id,Review review) {        try{//            Booking booking= bookingRepository.findById(id)//                    .orElseThrow(() -> new RuntimeException("Booking not found"));//            if(booking.getReview()!=null){//                throw new RuntimeException("Review Already exist for this booking");//            }            Review newReview= new Review();            newReview.setContent(review.getContent());            newReview.setRating(review.getRating());          return   reviewRepository.save(newReview);        }catch (Exception e){            System.out.println("error during the posting the review"+e.getMessage());            throw new RuntimeException(e);        }    }   /* public void findDriverBookings() {        List<Long> driverIds = new ArrayList<>(Arrays.asList(1L, 2L, 3L, 4L, 5L, 6L));        List<Driver> drivers = driverRepository.findAllByIdIn(driverIds);//        spring hibernate provide fetch SubSelect select query inside select which solve n+1 problem        for (Driver driver : drivers) {            List<Booking> bookings = driver.getBookings();            bookings.forEach(booking -> System.out.println(booking.getId()));        }}        */}
package com.example.uber.controllers;import com.example.uber.adapters.CreateReviewDtoToReviewAdapter;import com.example.uber.adapters.CreateReviewDtoToReviewAdapterImp;import com.example.uber.dtos.CreateReviewDto;import com.example.uber.dtos.ReviewDto;import com.example.uber.models.Review;import com.example.uber.services.ReviewService;import com.example.uber.services.ReviewServiceImp;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/")public class ReviewController {    private  final ReviewService reviewService;    private CreateReviewDtoToReviewAdapter createReviewDtoToReviewAdapter;    public ReviewController(ReviewService reviewService,CreateReviewDtoToReviewAdapter createReviewDtoToReviewAdapter) {        this.reviewService = reviewService;        this.createReviewDtoToReviewAdapter= createReviewDtoToReviewAdapter;    }    @GetMapping("/allReview")    public ResponseEntity<List<Review>> findAll() {        List<Review> reviews = reviewService.findAllReviews();        return ResponseEntity.ok(reviews);    }    @GetMapping("/{id}")    public ResponseEntity<Optional<Review>> findById(@PathVariable Long id) {        Optional<Review> reviews = reviewService.findReviewById(id);        return ResponseEntity.ok(reviews);    }//    @PutMapping("/{id}")//    public ResponseEntity<Review> updateReview(@RequestBody Review review, @PathVariable Long id) {//        Review updatedReview = reviewService.updateReviewById(review, id);//        return ResponseEntity.ok(updatedReview);//    }//    @GetMapping("/{bookingId}")//    public ResponseEntity<Review>findReviewByBookingId ( @PathVariable Long bookingId) {//        Review updatedReview = reviewService.findReviewByBookingId( bookingId);//        return ResponseEntity.ok(updatedReview);//    }    @GetMapping("/before")    public ResponseEntity<List<Review>>findReviewCreatedBefore ( @RequestBody Date date) {        List<Review>  reviewCreatedBefore= reviewService.findAllByCreatedAtBefore( date);        return ResponseEntity.ok(reviewCreatedBefore);    }    @GetMapping("/rating-less")    public ResponseEntity<List<Review>>findReviewRatingLessThanEqual ( @RequestBody Integer rating) {        List<Review> reviewRatingLessThanEqual= reviewService.findAllReviewsRatingLessThanEqual( rating);        return ResponseEntity.ok(reviewRatingLessThanEqual);    }    @GetMapping("/total")    public ResponseEntity<Integer>countAllRatingLessThanEqual( @RequestBody Integer rating) {        Integer totalCount = reviewService.countAllRatingLessThanEqual( rating);        return ResponseEntity.ok(totalCount);    }//    @DeleteMapping("/{reviewId}/{bookingId}")//    public Boolean deleteReviewById (@PathVariable Long reviewId,@PathVariable Long bookingId) {//   return reviewService.deleteReviewById(reviewId,bookingId);//    }    @PostMapping("/add")    public ResponseEntity<?> CreateReview(@PathVariable Long id, CreateReviewDto review) {        Review incomingReview= this.createReviewDtoToReviewAdapter.ConverDto(review);        if(incomingReview==null){            return new ResponseEntity<>("Invalid Arguments",HttpStatus.BAD_REQUEST);        }        Review newreview= this.reviewService.postReview(id,incomingReview);        ReviewDto response= ReviewDto.builder()                .id(newreview.getId())                .booking(newreview.getBooking().getId())                .content(newreview.getContent())                .rating(newreview.getRating())                .createdAt(newreview.getCreatedAt())                .updatedAt(newreview.getUpdatedAt())                .build();        return new ResponseEntity<>(response,HttpStatus.CREATED);    }}
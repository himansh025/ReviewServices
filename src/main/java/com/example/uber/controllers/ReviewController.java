package com.example.uber.controllers;import com.example.uber.models.Review;import com.example.uber.services.ReviewServiceImp;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.List;import java.util.Optional;@RestController@RequestMapping("/")public class ReviewController {    private final ReviewServiceImp reviewServiceImp;    public ReviewController(ReviewServiceImp reviewServiceImp) {        this.reviewServiceImp = reviewServiceImp;    }    @GetMapping("/allReview")    public ResponseEntity<List<Review>> findAll() {        List<Review> reviews = reviewServiceImp.findAllReviews();        return ResponseEntity.ok(reviews);    }    @GetMapping("/{id}")    public ResponseEntity<Optional<Review>> findById(@PathVariable Long id) {        Optional<Review> reviews = reviewServiceImp.findReviewById(id);        return ResponseEntity.ok(reviews);    }    @PutMapping("/{id}")    public ResponseEntity<Review> updateReview(@RequestBody Review review, @PathVariable Long id) {        Review updatedReview = reviewServiceImp.updateReviewById(review, id);        return ResponseEntity.ok(updatedReview);    }    @GetMapping("/{bookingId}")    public ResponseEntity<Review>findReviewByBookingId ( @PathVariable Long bookingId) {        Review updatedReview = reviewServiceImp.findReviewByBookingId( bookingId);        return ResponseEntity.ok(updatedReview);    }    @GetMapping("/before")    public ResponseEntity<List<Review>>findReviewCreatedBefore ( @RequestBody Date date) {        List<Review>  reviewCreatedBefore= reviewServiceImp.findAllByCreatedAtBefore( date);        return ResponseEntity.ok(reviewCreatedBefore);    }    @GetMapping("/rating-less")    public ResponseEntity<List<Review>>findReviewRatingLessThanEqual ( @RequestBody Integer rating) {        List<Review> reviewRatingLessThanEqual= reviewServiceImp.findAllReviewsRatingLessThanEqual( rating);        return ResponseEntity.ok(reviewRatingLessThanEqual);    }    @GetMapping("/total")    public ResponseEntity<Integer>countAllRatingLessThanEqual( @RequestBody Integer rating) {        Integer totalCount = reviewServiceImp.countAllRatingLessThanEqual( rating);        return ResponseEntity.ok(totalCount);    }    @DeleteMapping("/{reviewId}/{bookingId}")    public Boolean deleteReviewById (@PathVariable Long reviewId,@PathVariable Long bookingId) {   return reviewServiceImp.deleteReviewById(reviewId,bookingId);    }    @PostMapping("/add")    public ResponseEntity<Review> saveReview(@PathVariable Long id,@RequestBody Review review) {        Review newReview= reviewServiceImp.postReview(id,review);        return ResponseEntity                .status(HttpStatus.CREATED)                .body(newReview);    }}